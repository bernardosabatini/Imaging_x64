function siSession_buildInput
	global state focusInput 
    
    if ~isempty(focusInput)
        delete(focusInput)
    end
    focusInput=daq.createSession('ni');
    focusInput.Rate=state.acq.inputRate;
 	actualInputRate =focusInput.Rate;	
    
    onChannels=find(state.acq.acquiringChannel);
    state.internal.numberOfActiveChannels=length(onChannels);
	for channelCounter=onChannels
        ch=focusInput.addAnalogInputChannel(...
            state.imaging.daq.inputBoard, ...
            ['ai' num2str(channelCounter-1)],...
            'Voltage'...
            );
        ch.Range=[-10 10];
    end

    if state.imaging.daq.inputUseExternalTrigger
        focusInput.addTriggerConnection(...
            'external', ...
            [state.imaging.daq.inputBoard '/' state.imaging.daq.inputExternalTrigger], ...
            'StartTrigger'...
            );
    else
        focusInput.addTriggerConnection(...
            [state.imaging.daq.inputBoard '/' state.imaging.daq.inputExportTriggerLine], ...
            'external', ...
            'StartTrigger'...
            );
    end
    
    if state.imaging.daq.exportOutputDeviceClock % we want to export the clock
        focusInput.addClockConnection(...
            [state.imaging.daq.inputBoard '/' state.imaging.daq.exportOutputDeviceClockLine], ...
            'external', ...
            'ScanClock'...
            );     
    end
    
    siSet_acquisitionParameters
 	    
    state.internal.lh_grab=focusInput.addlistener('DataAvailable', @siListener_grabStripe);
    state.internal.lh_grab.Enabled=false;
    state.internal.lh_focus=focusInput.addlistener('DataAvailable', @siListener_focusStripe);
    state.internal.lh_focus.Enabled=false;

    state.imaging.daq.needNewInputSession=0;
    
    
